/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Base;

import Controler.MainControler;
import DTO.SectionDTO;
import UI.Fragment.HierarchyListenerInterfEx;
import UI.Fragment.SectionP;
import UI.Popup.SectionInfo;
import java.awt.GridLayout;
import java.awt.event.HierarchyEvent;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JOptionPane;


/**
 *
 * @author Admin
 */
public class SectionListPanel extends javax.swing.JPanel {
    private MainControler mc;
    private ArrayList<SectionP> displaying, hold;
    /**
     * Creates new form SectionListPanel
     */
    public SectionListPanel(MainControler mc) {
        initComponents();
        this.mc = mc;
        refresh();
        sizeCB.setSelectedIndex(0);
        freeCB.setSelectedIndex(0);
        valueCB.setSelectedIndex(0);
        addHierarchyListener(new HierarchyListenerInterfEx(){
            @Override
            public void hierarchyChanged(HierarchyEvent e){
                JComponent cpn = (JComponent) e.getSource();
                if  ((HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags()) != 0
                    && cpn.isShowing()){
                    refresh();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //Action performed Method
    private void refresh(){
        this.mc.refreshSect();
        this.displaying = new ArrayList<>();
        ArrayList<SectionDTO> allSectList = this.mc.getSectList();
        for(SectionDTO sec : allSectList){
            this.displaying.add(new SectionP(sec));
        }
        this.hold = this.displaying;
        setDisplay();
    }
    
    private void setDisplay(){
        displayPanel.removeAll();
        for(SectionP sp : this.displaying){
            displayPanel.add(sp);
        }
        int r = (displaying.size()/2) + (displaying.size()%2);
        r = (int) Math.max(r, displayPanel.getHeight()/142);
        displayPanel.setLayout(new GridLayout(r, 2));
        displayPanel.setVisible(false);
        displayPanel.setVisible(true);
    }
    
    private void search(){
        //search for section with code contain codE
        ArrayList<SectionP> tem = this.hold;
        this.displaying = new ArrayList<>();
        String codE = code.getText().toLowerCase();
        for(SectionP sp : tem ){
            if(sp.getData().getCode().toLowerCase().contains(codE)){
                this.displaying.add(sp);
            }
        }
        
        //search for section with size between vl1 and vl2
        Double sz1 = 0.0, sz2 = 0.0;
        switch (sizeCB.getSelectedIndex()) {
            case 0:
                sz2 = Double.MAX_VALUE;
                break;
            case 1:
                sz1 = Double.valueOf(sizeTop.getText());
                sz2 = Double.MAX_VALUE;
                break;
            case 2:
                sz2 = Double.valueOf(sizeTop.getText());
                break;
            case 3:
                sz1 = Double.valueOf(sizeTop.getText());
                sz2 = Double.valueOf(sizeBot.getText());
                break;
            default:
                sz2 = Double.MAX_VALUE;
                break;
        }
        tem = this.displaying;
        this.displaying = new ArrayList<>();
        for(SectionP sp : tem ){
            double sz = sp.getData().getSize();
            if(sz >= sz1 && sz <= sz2){
                this.displaying.add(sp);
            }
        }
        
        //search for section with free between vl1 and vl2
        Double fr1 = 0.0, fr2 = 0.0;
        switch (freeCB.getSelectedIndex()) {
            case 0:
                fr2 = Double.MAX_VALUE;
                break;
            case 1:
                fr1 = Double.valueOf(freeTop.getText());
                fr2 = Double.MAX_VALUE;
                break;
            case 2:
                fr2 = Double.valueOf(freeTop.getText());
                break;
            case 3:
                fr1 = Double.valueOf(freeTop.getText());
                fr2 = Double.valueOf(freeBot.getText());
                break;
            default:
                fr2 = Double.MAX_VALUE;
                break;
        }
        tem = this.displaying;
        this.displaying = new ArrayList<>();
        for(SectionP sp : tem ){
            double fr = sp.getData().getFree();
            if(fr >= fr1 && fr <= fr2){
                this.displaying.add(sp);
            }
        }
        //search for section with value between vl1 and vl2
        Double vl1 = 0.0, vl2 = 0.0;
        switch (valueCB.getSelectedIndex()) {
            case 0:
                vl2 = Double.MAX_VALUE;
                break;
            case 1:
                vl1 = Double.valueOf(valueTop.getText());
                vl2 = Double.MAX_VALUE;
                break;
            case 2:
                vl2 = Double.valueOf(valueTop.getText());
                break;
            case 3:
                vl1 = Double.valueOf(valueTop.getText());
                vl2 = Double.valueOf(valueBot.getText());
                break;
            default:
                vl2 = Double.MAX_VALUE;
                break;
        }
        tem = this.displaying;
        this.displaying = new ArrayList<>();
        for(SectionP sp : tem ){
            double vl = sp.getData().getFree();
            if(vl >= vl1 && vl <= vl2){
                this.displaying.add(sp);
            }
        }
        
        setDisplay();
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        searchByLb = new javax.swing.JLabel();
        codeLb = new javax.swing.JLabel();
        sizeLb = new javax.swing.JLabel();
        sizeTopLb = new javax.swing.JLabel();
        sizeBotLb = new javax.swing.JLabel();
        code = new javax.swing.JTextField();
        sizeCB = new javax.swing.JComboBox<>();
        sizeTop = new javax.swing.JTextField();
        sizeBot = new javax.swing.JTextField();
        freeCB = new javax.swing.JComboBox<>();
        freeLb = new javax.swing.JLabel();
        freeTopLb = new javax.swing.JLabel();
        freeBotLb = new javax.swing.JLabel();
        freeTop = new javax.swing.JTextField();
        freeBot = new javax.swing.JTextField();
        valueCB = new javax.swing.JComboBox<>();
        valueLb = new javax.swing.JLabel();
        valueTopLb = new javax.swing.JLabel();
        valueBotLb = new javax.swing.JLabel();
        valueTop = new javax.swing.JTextField();
        valueBot = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        editBt = new javax.swing.JButton();
        addBt = new javax.swing.JButton();
        removeBt = new javax.swing.JButton();
        scroller = new javax.swing.JScrollPane();
        displayPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1160, 600));

        searchByLb.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchByLb.setText("Search By");

        codeLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        codeLb.setText("Code :");

        sizeLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sizeLb.setText("Size :");

        sizeTopLb.setText("From :");

        sizeBotLb.setText("To :");

        code.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        sizeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Upper", "Lower", "From To" }));
        sizeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeCBActionPerformed(evt);
            }
        });

        sizeTop.setText("0");
        sizeTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sizeTopFocusLost(evt);
            }
        });

        sizeBot.setText("0");
        sizeBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sizeBotFocusLost(evt);
            }
        });

        freeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Upper", "Lower", "From To" }));
        freeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeCBActionPerformed(evt);
            }
        });

        freeLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        freeLb.setText("Free Space :");

        freeTopLb.setText("From :");

        freeBotLb.setText("To :");

        freeTop.setText("0");
        freeTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                freeTopFocusLost(evt);
            }
        });

        freeBot.setText("0");
        freeBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                freeBotFocusLost(evt);
            }
        });

        valueCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Upper", "Lower", "From To" }));
        valueCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueCBActionPerformed(evt);
            }
        });

        valueLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        valueLb.setText("Value :");

        valueTopLb.setText("From :");

        valueBotLb.setText("To :");

        valueTop.setText("0");
        valueTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                valueTopFocusLost(evt);
            }
        });

        valueBot.setText("0");
        valueBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                valueBotFocusLost(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        editBt.setText("Edit");
        editBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtActionPerformed(evt);
            }
        });

        addBt.setBackground(new java.awt.Color(255, 153, 51));
        addBt.setText("Add New Section");
        addBt.setOpaque(true);
        addBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtActionPerformed(evt);
            }
        });

        removeBt.setText("Remove");
        removeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchByLb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(codeLb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(code))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(sizeBotLb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sizeBot))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(sizeTopLb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sizeTop))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(freeLb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(freeBotLb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(freeBot))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(freeTopLb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(freeTop))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(sizeLb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(valueLb, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueCB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(valueBotLb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(valueBot))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(valueTopLb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(valueTop))
                    .addComponent(addBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(editBt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeBt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchByLb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeLb)
                    .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeLb)
                    .addComponent(sizeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeTopLb)
                    .addComponent(sizeTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeBotLb)
                    .addComponent(sizeBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freeLb)
                    .addComponent(freeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freeTopLb)
                    .addComponent(freeTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freeBotLb)
                    .addComponent(freeBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueLb)
                    .addComponent(valueCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueTopLb)
                    .addComponent(valueTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueBotLb)
                    .addComponent(valueBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(refreshButton))
                .addGap(18, 18, 18)
                .addComponent(addBt)
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBt)
                    .addComponent(removeBt))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displayPanel.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 894, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        scroller.setViewportView(displayPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroller)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scroller)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        search();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void sizeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeCBActionPerformed
        String pri = sizeCB.getSelectedItem().toString();
        String t = "", b = "";
        Boolean c1, c2;
        switch (pri) {
            case "All":
            t = ""; b = "";
            c1 = false; c2 = false;
            break;
            case "Upper":
            t = "Than"; b = "";
            c1 = true; c2 = false;
            break;
            case "Lower":
            t = "Than"; b = "";
            c1 = true; c2 = false;
            break;
            case "From To":
            t = "From"; b = "To";
            c1 = true; c2 = true;
            break;
            default:
            throw new AssertionError();
        }
        sizeTopLb.setText(t);
        sizeTop.setText("0");
        sizeBotLb.setText(b);
        sizeBot.setText("0");

        sizeTop.setVisible(c1);
        sizeBot.setVisible(c2);
    }//GEN-LAST:event_sizeCBActionPerformed

    private void freeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeCBActionPerformed
        String pri = freeCB.getSelectedItem().toString();
        String t = "", b = "";
        Boolean c1, c2;
        switch (pri) {
            case "All":
            t = ""; b = "";
            c1 = false; c2 = false;
            break;
            case "Upper":
            t = "Than"; b = "";
            c1 = true; c2 = false;
            break;
            case "Lower":
            t = "Than"; b = "";
            c1 = true; c2 = false;
            break;
            case "From To":
            t = "From"; b = "To";
            c1 = true; c2 = true;
            break;
            default:
            throw new AssertionError();
        }
        freeTopLb.setText(t);
        freeTop.setText("0");
        freeBotLb.setText(b);
        freeBot.setText("0");

        freeTop.setVisible(c1);
        freeBot.setVisible(c2);
    }//GEN-LAST:event_freeCBActionPerformed

    private void valueCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueCBActionPerformed
    String pri = valueCB.getSelectedItem().toString();
        String t = "", b = "";
        Boolean c1, c2;
        switch (pri) {
            case "All":
            t = ""; b = "";
            c1 = false; c2 = false;
            break;
            case "Upper":
            t = "Than"; b = "";
            c1 = true; c2 = false;
            break;
            case "Lower":
            t = "Than"; b = "";
            c1 = true; c2 = false;
            break;
            case "From To":
            t = "From"; b = "To";
            c1 = true; c2 = true;
            break;
            default:
            throw new AssertionError();
        }
        valueTopLb.setText(t);
        valueTop.setText("0");
        valueBotLb.setText(b);
        valueBot.setText("0");

        valueTop.setVisible(c1);
        valueBot.setVisible(c2);
    }//GEN-LAST:event_valueCBActionPerformed

    private void sizeTopFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sizeTopFocusLost
        sizeTop.setText(sizeTop.getText().replaceAll("[a-zA-Z]", ""));
        if(sizeTop.getText().length() == 0){
            sizeTop.setText("0");
        }
    }//GEN-LAST:event_sizeTopFocusLost

    private void sizeBotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sizeBotFocusLost
        sizeBot.setText(sizeBot.getText().replaceAll("[a-zA-Z]", ""));
        if(sizeBot.getText().length() == 0){
            sizeBot.setText("0");
        }
    }//GEN-LAST:event_sizeBotFocusLost

    private void freeTopFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_freeTopFocusLost
        freeTop.setText(freeTop.getText().replaceAll("[a-zA-Z]", ""));
        if(freeTop.getText().length() == 0){
            freeTop.setText("0");
        }
    }//GEN-LAST:event_freeTopFocusLost

    private void freeBotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_freeBotFocusLost
        freeBot.setText(freeBot.getText().replaceAll("[a-zA-Z]", ""));
        if(freeBot.getText().length() == 0){
            freeBot.setText("0");
        }
    }//GEN-LAST:event_freeBotFocusLost

    private void valueTopFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valueTopFocusLost
        valueTop.setText(valueTop.getText().replaceAll("[a-zA-Z]", ""));
        if(valueTop.getText().length() == 0){
            valueTop.setText("0");
        }
    }//GEN-LAST:event_valueTopFocusLost

    private void valueBotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valueBotFocusLost
        valueBot.setText(valueBot.getText().replaceAll("[a-zA-Z]", ""));
        if(valueBot.getText().length() == 0){
            valueBot.setText("0");
        }
    }//GEN-LAST:event_valueBotFocusLost

    private void removeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtActionPerformed
        if(JOptionPane.showConfirmDialog(null, "Delete all selected section ?\n This action cannot be undo.") == 0){
            for(SectionP sp : this.displaying){
                if(sp.isSelect()){
                    this.mc.getsDAO().deleteSection(sp.getData());
                }
            }
        }
        refresh();
    }//GEN-LAST:event_removeBtActionPerformed

    private void editBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtActionPerformed
        for(SectionP sp : this.displaying){
            if(sp.isSelect()){
                System.out.println(sp.getData().getImageDIR());
                new SectionInfo(mc, sp.getData(), 1).setVisible(true);
            }
        }
    }//GEN-LAST:event_editBtActionPerformed

    private void addBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtActionPerformed
        new SectionInfo(mc, new SectionDTO(), 0).setVisible(true);
    }//GEN-LAST:event_addBtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBt;
    private javax.swing.JTextField code;
    private javax.swing.JLabel codeLb;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton editBt;
    private javax.swing.JTextField freeBot;
    private javax.swing.JLabel freeBotLb;
    private javax.swing.JComboBox<String> freeCB;
    private javax.swing.JLabel freeLb;
    private javax.swing.JTextField freeTop;
    private javax.swing.JLabel freeTopLb;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeBt;
    private javax.swing.JScrollPane scroller;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchByLb;
    private javax.swing.JTextField sizeBot;
    private javax.swing.JLabel sizeBotLb;
    private javax.swing.JComboBox<String> sizeCB;
    private javax.swing.JLabel sizeLb;
    private javax.swing.JTextField sizeTop;
    private javax.swing.JLabel sizeTopLb;
    private javax.swing.JTextField valueBot;
    private javax.swing.JLabel valueBotLb;
    private javax.swing.JComboBox<String> valueCB;
    private javax.swing.JLabel valueLb;
    private javax.swing.JTextField valueTop;
    private javax.swing.JLabel valueTopLb;
    // End of variables declaration//GEN-END:variables
}
